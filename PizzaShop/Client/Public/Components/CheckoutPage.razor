@page "/pizzashop/checkout"
@rendermode InteractiveServer

@using demos.blazer.webapp.PizzaShop.Client.Public.Services
@using demos.blazer.webapp.PizzaShop.Client.Public.Models

@inject NavigationManager NavigationManager
@inject IPizzaStoreRepository PizzaStore
@inject OrderState OrderState

<div class="main">
    <EditForm Model=Order.DeliveryAddress OnSubmit=CheckSubmission>
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="Order" />
            </div>

            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                @if (isError)
                {
                    <div class="alert alert-danger">Please enter a name and address.</div>
                }
                <AddressEditor Address="Order.DeliveryAddress" />
            </div>
        </div>

        <button class="checkout-button btn btn-warning" disabled=@isSubmitting>
            Place order
        </button>
    </EditForm>
</div>

@code {
    bool isSubmitting;
    bool isError = false;
    Order Order;

    protected override void OnInitialized()
    {
        Order = OrderState.Order;
    }

    private async Task CheckSubmission(EditContext editContext)
    {
        isSubmitting = true;
        var model = editContext.Model as Address;
        isError = string.IsNullOrWhiteSpace(model?.Name)
            || string.IsNullOrWhiteSpace(model?.Line1)
            || string.IsNullOrWhiteSpace(model?.PostalCode);
        if (!isError)
        {
            await PlaceOrder();
        }
        isSubmitting = false;
    }

    private async Task PlaceOrder()
    {
        isSubmitting = true;
        
        var newOrderId = await PizzaStore.Save(OrderState.Order);

        OrderState.ResetOrder();

        NavigationManager.NavigateTo($"pizzashop/orders/{newOrderId}");
    }
}