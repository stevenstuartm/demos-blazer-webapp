@page "/pizzashop/orders"
@using demos.blazer.webapp.PizzaShop.Client.Public.Services
@using demos.blazer.webapp.PizzaShop.Client.Public.Models
@using demos.blazer.webapp.PizzaShop.Shared;

@inject IPizzaStoreRepository PizzaStore

<div class="main">
    @if (orders == null)
    {
        <text>Loading...</text>
    }
    else if (!orders.Any())
    {
        <h2>No orders placed</h2>
        <a class="btn btn-success" href="pizzashop/menu">Order some pizza</a>
    }
    else
    {
        <PaginationComponent TItem="Order"
                                Items="orders.OrderBy(o => o.CreatedTime).ToList()"
                                ItemLabel='item => new($"{item.CreatedTime:ddd, MMM. d, yyyy}")'>
            <ItemContent>
                <div class="list-group-item bg-secondary text-white">
                    <div class="col">
                        <h5>@($"{context.CreatedTime:dddd, MMMM d, yyyy hh:mm tt}")</h5>
                        Items:
                        <strong>@context.Pizzas.Count</strong>
                    </div>
                    <div class="col">
                        Status: <strong>@context.StatusText</strong>
                    </div>
                    @if (@context.StatusText != "Delivered")
                    {
                        <div class="col flex-grow-0">
                            <a href="pizzashop/orders/@context.Id" class="btn btn-success">
                                Track &gt;
                            </a>
                        </div>
                    }
                </div>
                <div class="list-group-item">
                    <div class="col">
                        <OrderReview Order="@context" />
                    </div>
                </div>
            </ItemContent>
        </PaginationComponent>
    }
</div>

@code {
    List<Order> orders = new List<Order>();

    protected override async Task OnParametersSetAsync()
    {
        orders = await PizzaStore.GetOrders();
    }
}