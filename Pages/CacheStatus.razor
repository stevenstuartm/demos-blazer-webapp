@page "/cache-status"
@using demos.blazer.webapp.CacheManagement
@using demos.blazer.webappPizzaShop.Client.Services
@inject IGlobalCacheCoordinator CacheCoordinator
@implements IDisposable

<h3>Cache Status</h3>

<div class="alert alert-info">
    <strong>Status:</strong> @(CacheCoordinator.IsInitialized ? "Initialized" : "Not Initialized")
</div>

<div class="alert alert-secondary">
    <strong>Pizza Specials Cache:</strong>
    <br />Last Refreshed: @PizzaSpecialsCache.LastRefreshed.ToString("yyyy-MM-dd HH:mm:ss")
    <br />Is Loaded: @PizzaSpecialsCache.IsInitialized
</div>

<button class="btn btn-primary" @onclick="ForceRefresh">Force Refresh Cache</button>
<button class="btn btn-secondary" @onclick="StartHeartbeat">Start Heartbeat</button>
<button class="btn btn-warning" @onclick="StopHeartbeat">Stop Heartbeat</button>

<div class="mt-3">
    <h4>Recent Cache Events:</h4>
    <ul>
        @foreach (var evt in _events.Take(10))
        {
            <li>@evt</li>
        }
    </ul>
</div>

@code {
    private readonly List<string> _events = new();

    protected override void OnInitialized()
    {
        CacheCoordinator.CacheRefreshed += OnCacheRefreshed;
    }

    private void OnCacheRefreshed(object? sender, CacheRefreshedEventArgs e)
    {
        InvokeAsync(() =>
        {
            _events.Insert(0, $"{e.RefreshedAt:HH:mm:ss} - {e.CacheKey} refreshed");
            StateHasChanged();
        });
    }

    private async Task ForceRefresh()
    {
        await CacheCoordinator.InitializeAsync();
        _events.Insert(0, $"{DateTime.Now:HH:mm:ss} - Manual refresh triggered");
        StateHasChanged();
    }

    private void StartHeartbeat()
    {
        CacheCoordinator.StartHeartbeat();
        _events.Insert(0, $"{DateTime.Now:HH:mm:ss} - Heartbeat started");
        StateHasChanged();
    }

    private async Task StopHeartbeat()
    {
        await CacheCoordinator.StopHeartbeatAsync();
        _events.Insert(0, $"{DateTime.Now:HH:mm:ss} - Heartbeat stopped");
        StateHasChanged();
    }

    public void Dispose()
    {
        CacheCoordinator.CacheRefreshed -= OnCacheRefreshed;
    }
}