@page "/pizzashop/checkout"
@rendermode InteractiveServer
@implements IDisposable

@using demos.blazer.webapp.PizzaShop.Client.Public.Services
@using demos.blazer.webapp.PizzaShop.Client.Public.Models

@inject NavigationManager NavigationManager
@inject IPizzaStoreRepository PizzaStore
@inject OrderState OrderState

<div class="main">
    <EditForm EditContext=editContext OnValidSubmit=PlaceOrder>
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="Order" />
            </div>

            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                @if (isError)
                {
                    <div class="alert alert-danger">Please enter a name and address.</div>
                }
                <AddressEditor Address="Order.DeliveryAddress" />
            </div>
        </div>

        <button class="checkout-button btn btn-warning" type="Submit" disabled=@isError>
            Place order
        </button>
        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {
    EditContext editContext;
    bool isError = false;
    Order Order;

    protected override void OnInitialized()
    {
        Order = OrderState.Order;
        editContext = new(Order.DeliveryAddress);
        editContext.OnFieldChanged += HandleFieldChanged;
    }

    private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        isError = !editContext.Validate();
        StateHasChanged();
    }

    private async Task PlaceOrder()
    {
        var newOrderId = await PizzaStore.Save(OrderState.Order);

        OrderState.ResetOrder();

        NavigationManager.NavigateTo($"pizzashop/orders/{newOrderId}");
    }

    protected void ShowError()
    {
        isError = true;
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= HandleFieldChanged;
    }
}